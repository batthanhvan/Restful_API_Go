// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: apiservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiService_HandleRegisterPost_FullMethodName          = "/apiservice.ApiService/HandleRegisterPost"
	ApiService_HandleLoginPost_FullMethodName             = "/apiservice.ApiService/HandleLoginPost"
	ApiService_UserHandleChangePasswordPut_FullMethodName = "/apiservice.ApiService/UserHandleChangePasswordPut"
	ApiService_HandleSearchStudentGet_FullMethodName      = "/apiservice.ApiService/HandleSearchStudentGet"
	ApiService_HandleListStudentGet_FullMethodName        = "/apiservice.ApiService/HandleListStudentGet"
	ApiService_HandleSearchClassGet_FullMethodName        = "/apiservice.ApiService/HandleSearchClassGet"
	ApiService_HandleListClassGet_FullMethodName          = "/apiservice.ApiService/HandleListClassGet"
	ApiService_HandleListStudentGetByClass_FullMethodName = "/apiservice.ApiService/HandleListStudentGetByClass"
	ApiService_HandleCreateStudentPost_FullMethodName     = "/apiservice.ApiService/HandleCreateStudentPost"
	ApiService_HandleCreateClassPost_FullMethodName       = "/apiservice.ApiService/HandleCreateClassPost"
	ApiService_HandleUpdateStudentPut_FullMethodName      = "/apiservice.ApiService/HandleUpdateStudentPut"
	ApiService_HandleUpdateClassPut_FullMethodName        = "/apiservice.ApiService/HandleUpdateClassPut"
	ApiService_HandleStudentDelete_FullMethodName         = "/apiservice.ApiService/HandleStudentDelete"
	ApiService_HandleClassDelete_FullMethodName           = "/apiservice.ApiService/HandleClassDelete"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HandleRegisterPost(ctx context.Context, in *RegisterPostRequest, opts ...grpc.CallOption) (*RegisterPostResponse, error)
	HandleLoginPost(ctx context.Context, in *LoginPostRequest, opts ...grpc.CallOption) (*LoginPostResponse, error)
	UserHandleChangePasswordPut(ctx context.Context, in *ChangePasswordPutRequest, opts ...grpc.CallOption) (*ChangePasswordPutResponse, error)
	HandleSearchStudentGet(ctx context.Context, in *SearchStudentGetRequest, opts ...grpc.CallOption) (*SearchStudentGetResponse, error)
	HandleListStudentGet(ctx context.Context, in *SearchStudentGetRequest, opts ...grpc.CallOption) (*SearchStudentGetResponse, error)
	HandleSearchClassGet(ctx context.Context, in *SearchClassGetRequest, opts ...grpc.CallOption) (*SearchClassGetResponse, error)
	HandleListClassGet(ctx context.Context, in *SearchClassGetRequest, opts ...grpc.CallOption) (*SearchClassGetResponse, error)
	HandleListStudentGetByClass(ctx context.Context, in *ListStudentGetByClassRequest, opts ...grpc.CallOption) (*ListStudentGetByClassResponse, error)
	HandleCreateStudentPost(ctx context.Context, in *CreateStudentPostRequest, opts ...grpc.CallOption) (*CreateStudentPostResponse, error)
	HandleCreateClassPost(ctx context.Context, in *CreateClassPostRequest, opts ...grpc.CallOption) (*CreateClassPostResponse, error)
	HandleUpdateStudentPut(ctx context.Context, in *UpdateStudentPutRequest, opts ...grpc.CallOption) (*UpdateStudentPutResponse, error)
	HandleUpdateClassPut(ctx context.Context, in *UpdateClassPutRequest, opts ...grpc.CallOption) (*UpdateClassPutResponse, error)
	HandleStudentDelete(ctx context.Context, in *StudentDeleteRequest, opts ...grpc.CallOption) (*StudentDeleteResponse, error)
	HandleClassDelete(ctx context.Context, in *ClassDeleteRequest, opts ...grpc.CallOption) (*ClassDeleteResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HandleRegisterPost(ctx context.Context, in *RegisterPostRequest, opts ...grpc.CallOption) (*RegisterPostResponse, error) {
	out := new(RegisterPostResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleRegisterPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleLoginPost(ctx context.Context, in *LoginPostRequest, opts ...grpc.CallOption) (*LoginPostResponse, error) {
	out := new(LoginPostResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleLoginPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UserHandleChangePasswordPut(ctx context.Context, in *ChangePasswordPutRequest, opts ...grpc.CallOption) (*ChangePasswordPutResponse, error) {
	out := new(ChangePasswordPutResponse)
	err := c.cc.Invoke(ctx, ApiService_UserHandleChangePasswordPut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleSearchStudentGet(ctx context.Context, in *SearchStudentGetRequest, opts ...grpc.CallOption) (*SearchStudentGetResponse, error) {
	out := new(SearchStudentGetResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleSearchStudentGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleListStudentGet(ctx context.Context, in *SearchStudentGetRequest, opts ...grpc.CallOption) (*SearchStudentGetResponse, error) {
	out := new(SearchStudentGetResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleListStudentGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleSearchClassGet(ctx context.Context, in *SearchClassGetRequest, opts ...grpc.CallOption) (*SearchClassGetResponse, error) {
	out := new(SearchClassGetResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleSearchClassGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleListClassGet(ctx context.Context, in *SearchClassGetRequest, opts ...grpc.CallOption) (*SearchClassGetResponse, error) {
	out := new(SearchClassGetResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleListClassGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleListStudentGetByClass(ctx context.Context, in *ListStudentGetByClassRequest, opts ...grpc.CallOption) (*ListStudentGetByClassResponse, error) {
	out := new(ListStudentGetByClassResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleListStudentGetByClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleCreateStudentPost(ctx context.Context, in *CreateStudentPostRequest, opts ...grpc.CallOption) (*CreateStudentPostResponse, error) {
	out := new(CreateStudentPostResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleCreateStudentPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleCreateClassPost(ctx context.Context, in *CreateClassPostRequest, opts ...grpc.CallOption) (*CreateClassPostResponse, error) {
	out := new(CreateClassPostResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleCreateClassPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleUpdateStudentPut(ctx context.Context, in *UpdateStudentPutRequest, opts ...grpc.CallOption) (*UpdateStudentPutResponse, error) {
	out := new(UpdateStudentPutResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleUpdateStudentPut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleUpdateClassPut(ctx context.Context, in *UpdateClassPutRequest, opts ...grpc.CallOption) (*UpdateClassPutResponse, error) {
	out := new(UpdateClassPutResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleUpdateClassPut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleStudentDelete(ctx context.Context, in *StudentDeleteRequest, opts ...grpc.CallOption) (*StudentDeleteResponse, error) {
	out := new(StudentDeleteResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleStudentDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HandleClassDelete(ctx context.Context, in *ClassDeleteRequest, opts ...grpc.CallOption) (*ClassDeleteResponse, error) {
	out := new(ClassDeleteResponse)
	err := c.cc.Invoke(ctx, ApiService_HandleClassDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HandleRegisterPost(context.Context, *RegisterPostRequest) (*RegisterPostResponse, error)
	HandleLoginPost(context.Context, *LoginPostRequest) (*LoginPostResponse, error)
	UserHandleChangePasswordPut(context.Context, *ChangePasswordPutRequest) (*ChangePasswordPutResponse, error)
	HandleSearchStudentGet(context.Context, *SearchStudentGetRequest) (*SearchStudentGetResponse, error)
	HandleListStudentGet(context.Context, *SearchStudentGetRequest) (*SearchStudentGetResponse, error)
	HandleSearchClassGet(context.Context, *SearchClassGetRequest) (*SearchClassGetResponse, error)
	HandleListClassGet(context.Context, *SearchClassGetRequest) (*SearchClassGetResponse, error)
	HandleListStudentGetByClass(context.Context, *ListStudentGetByClassRequest) (*ListStudentGetByClassResponse, error)
	HandleCreateStudentPost(context.Context, *CreateStudentPostRequest) (*CreateStudentPostResponse, error)
	HandleCreateClassPost(context.Context, *CreateClassPostRequest) (*CreateClassPostResponse, error)
	HandleUpdateStudentPut(context.Context, *UpdateStudentPutRequest) (*UpdateStudentPutResponse, error)
	HandleUpdateClassPut(context.Context, *UpdateClassPutRequest) (*UpdateClassPutResponse, error)
	HandleStudentDelete(context.Context, *StudentDeleteRequest) (*StudentDeleteResponse, error)
	HandleClassDelete(context.Context, *ClassDeleteRequest) (*ClassDeleteResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HandleRegisterPost(context.Context, *RegisterPostRequest) (*RegisterPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRegisterPost not implemented")
}
func (UnimplementedApiServiceServer) HandleLoginPost(context.Context, *LoginPostRequest) (*LoginPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleLoginPost not implemented")
}
func (UnimplementedApiServiceServer) UserHandleChangePasswordPut(context.Context, *ChangePasswordPutRequest) (*ChangePasswordPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHandleChangePasswordPut not implemented")
}
func (UnimplementedApiServiceServer) HandleSearchStudentGet(context.Context, *SearchStudentGetRequest) (*SearchStudentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSearchStudentGet not implemented")
}
func (UnimplementedApiServiceServer) HandleListStudentGet(context.Context, *SearchStudentGetRequest) (*SearchStudentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleListStudentGet not implemented")
}
func (UnimplementedApiServiceServer) HandleSearchClassGet(context.Context, *SearchClassGetRequest) (*SearchClassGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSearchClassGet not implemented")
}
func (UnimplementedApiServiceServer) HandleListClassGet(context.Context, *SearchClassGetRequest) (*SearchClassGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleListClassGet not implemented")
}
func (UnimplementedApiServiceServer) HandleListStudentGetByClass(context.Context, *ListStudentGetByClassRequest) (*ListStudentGetByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleListStudentGetByClass not implemented")
}
func (UnimplementedApiServiceServer) HandleCreateStudentPost(context.Context, *CreateStudentPostRequest) (*CreateStudentPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCreateStudentPost not implemented")
}
func (UnimplementedApiServiceServer) HandleCreateClassPost(context.Context, *CreateClassPostRequest) (*CreateClassPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCreateClassPost not implemented")
}
func (UnimplementedApiServiceServer) HandleUpdateStudentPut(context.Context, *UpdateStudentPutRequest) (*UpdateStudentPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdateStudentPut not implemented")
}
func (UnimplementedApiServiceServer) HandleUpdateClassPut(context.Context, *UpdateClassPutRequest) (*UpdateClassPutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdateClassPut not implemented")
}
func (UnimplementedApiServiceServer) HandleStudentDelete(context.Context, *StudentDeleteRequest) (*StudentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleStudentDelete not implemented")
}
func (UnimplementedApiServiceServer) HandleClassDelete(context.Context, *ClassDeleteRequest) (*ClassDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleClassDelete not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HandleRegisterPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleRegisterPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleRegisterPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleRegisterPost(ctx, req.(*RegisterPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleLoginPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleLoginPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleLoginPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleLoginPost(ctx, req.(*LoginPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UserHandleChangePasswordPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UserHandleChangePasswordPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UserHandleChangePasswordPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UserHandleChangePasswordPut(ctx, req.(*ChangePasswordPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleSearchStudentGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStudentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleSearchStudentGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleSearchStudentGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleSearchStudentGet(ctx, req.(*SearchStudentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleListStudentGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStudentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleListStudentGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleListStudentGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleListStudentGet(ctx, req.(*SearchStudentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleSearchClassGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClassGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleSearchClassGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleSearchClassGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleSearchClassGet(ctx, req.(*SearchClassGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleListClassGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClassGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleListClassGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleListClassGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleListClassGet(ctx, req.(*SearchClassGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleListStudentGetByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentGetByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleListStudentGetByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleListStudentGetByClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleListStudentGetByClass(ctx, req.(*ListStudentGetByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleCreateStudentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleCreateStudentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleCreateStudentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleCreateStudentPost(ctx, req.(*CreateStudentPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleCreateClassPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleCreateClassPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleCreateClassPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleCreateClassPost(ctx, req.(*CreateClassPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleUpdateStudentPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleUpdateStudentPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleUpdateStudentPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleUpdateStudentPut(ctx, req.(*UpdateStudentPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleUpdateClassPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleUpdateClassPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleUpdateClassPut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleUpdateClassPut(ctx, req.(*UpdateClassPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleStudentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleStudentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleStudentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleStudentDelete(ctx, req.(*StudentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HandleClassDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HandleClassDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_HandleClassDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HandleClassDelete(ctx, req.(*ClassDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiservice.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleRegisterPost",
			Handler:    _ApiService_HandleRegisterPost_Handler,
		},
		{
			MethodName: "HandleLoginPost",
			Handler:    _ApiService_HandleLoginPost_Handler,
		},
		{
			MethodName: "UserHandleChangePasswordPut",
			Handler:    _ApiService_UserHandleChangePasswordPut_Handler,
		},
		{
			MethodName: "HandleSearchStudentGet",
			Handler:    _ApiService_HandleSearchStudentGet_Handler,
		},
		{
			MethodName: "HandleListStudentGet",
			Handler:    _ApiService_HandleListStudentGet_Handler,
		},
		{
			MethodName: "HandleSearchClassGet",
			Handler:    _ApiService_HandleSearchClassGet_Handler,
		},
		{
			MethodName: "HandleListClassGet",
			Handler:    _ApiService_HandleListClassGet_Handler,
		},
		{
			MethodName: "HandleListStudentGetByClass",
			Handler:    _ApiService_HandleListStudentGetByClass_Handler,
		},
		{
			MethodName: "HandleCreateStudentPost",
			Handler:    _ApiService_HandleCreateStudentPost_Handler,
		},
		{
			MethodName: "HandleCreateClassPost",
			Handler:    _ApiService_HandleCreateClassPost_Handler,
		},
		{
			MethodName: "HandleUpdateStudentPut",
			Handler:    _ApiService_HandleUpdateStudentPut_Handler,
		},
		{
			MethodName: "HandleUpdateClassPut",
			Handler:    _ApiService_HandleUpdateClassPut_Handler,
		},
		{
			MethodName: "HandleStudentDelete",
			Handler:    _ApiService_HandleStudentDelete_Handler,
		},
		{
			MethodName: "HandleClassDelete",
			Handler:    _ApiService_HandleClassDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiservice.proto",
}
